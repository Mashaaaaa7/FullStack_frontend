import React, { useState, useEffect } from 'react';
import { Card, Deck } from './types';
import { api } from './api';
import './App.css';

const App: React.FC = () => {
    const [decks, setDecks] = useState<Deck[]>([]);
    const [cards, setCards] = useState<Card[]>([]);
    const [selectedDeck, setSelectedDeck] = useState<string>('');
    const [loading, setLoading] = useState(false);
    const [message, setMessage] = useState('');

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–µ–∫–æ–≤
    const loadDecks = async () => {
        try {
            const response = await api.getDecks();
            if (response.success) {
                setDecks(response.decks);
            }
        } catch (error) {
            setMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤');
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        setLoading(true);
        setMessage('');

        try {
            const result = await api.uploadPDF(file);
            setMessage(result.message);

            if (result.success) {
                await loadDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–∫–æ–≤
            }
        } catch (error) {
            setMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
        } finally {
            setLoading(false);
        }
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    const handleCreateCards = async (deckName: string) => {
        setLoading(true);
        setMessage('');

        try {
            const result = await api.createCards(deckName);
            if (result.success) {
                setCards(result.cards);
                setSelectedDeck(deckName);
                setMessage(`–°–æ–∑–¥–∞–Ω–æ ${result.total} –∫–∞—Ä—Ç–æ—á–µ–∫`);
            }
        } catch (error) {
            setMessage('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫');
        } finally {
            setLoading(false);
        }
    };

    // ‚úÖ –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –§–ê–ô–õ–ê
    const handleDeleteDeck = async (deckName: string) => {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${deckName}" –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏?`)) {
            return;
        }

        setLoading(true);
        setMessage('');

        try {
            const result = await api.deleteDeck(deckName);
            setMessage(result.message);

            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–∫–æ–≤
                await loadDecks();

                // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π —Ñ–∞–π–ª –±—ã–ª –≤—ã–±—Ä–∞–Ω, –æ—á–∏—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
                if (selectedDeck === deckName) {
                    setCards([]);
                    setSelectedDeck('');
                }
            }
        } catch (error) {
            setMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
        } finally {
            setLoading(false);
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    useEffect(() => {
        loadDecks();
    }, []);

    return (
        <div className="app">
            <header className="app-header">
                <h1>üé¥ –£—á–µ–±–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ PDF</h1>
                <p>–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</p>
            </header>

            <main className="app-main">
                {/* –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ */}
                <section className="upload-section">
                    <h2>üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª</h2>
                    <div className="upload-area">
                        <input
                            type="file"
                            accept=".pdf"
                            onChange={handleFileUpload}
                            disabled={loading}
                            id="file-upload"
                        />
                        <label htmlFor="file-upload" className="upload-label">
                            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª'}
                        </label>
                    </div>
                </section>

                {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
                {message && (
                    <div className={`message ${message.includes('–û—à–∏–±–∫–∞') ? 'error' : 'success'}`}>
                        {message}
                    </div>
                )}

                {/* –°–ø–∏—Å–æ–∫ –¥–µ–∫–æ–≤ */}
                <section className="decks-section">
                    <h2>üìÅ –í–∞—à–∏ PDF —Ñ–∞–π–ª—ã ({decks.length})</h2>
                    <div className="decks-grid">
                        {decks.map(deck => (
                            <div key={deck.name} className="deck-card">
                                <div className="deck-info">
                                    <h3>{deck.name}</h3>
                                    <p>–†–∞–∑–º–µ—Ä: {(deck.file_size / 1024 / 1024).toFixed(2)} MB</p>
                                    <p>–ó–∞–≥—Ä—É–∂–µ–Ω: {deck.created_at}</p>
                                </div>
                                <div className="deck-actions">
                                    <button
                                        onClick={() => handleCreateCards(deck.name)}
                                        disabled={loading}
                                        className="create-cards-btn"
                                    >
                                        –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
                                    </button>
                                    {/* ‚úÖ –ö–ù–û–ü–ö–ê –£–î–ê–õ–ï–ù–ò–Ø */}
                                    <button
                                        onClick={() => handleDeleteDeck(deck.name)}
                                        disabled={loading}
                                        className="delete-btn"
                                        title={`–£–¥–∞–ª–∏—Ç—å ${deck.name}`}
                                    >
                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </div>
                            </div>
                        ))}
                        {decks.length === 0 && (
                            <div className="empty-state">
                                <p>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö PDF —Ñ–∞–π–ª–æ–≤</p>
                                <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</p>
                            </div>
                        )}
                    </div>
                </section>

                {/* –ö–∞—Ä—Ç–æ—á–∫–∏ */}
                {cards.length > 0 && (
                    <section className="cards-section">
                        <h2>üé¥ –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ "{selectedDeck}" ({cards.length})</h2>
                        <div className="cards-grid">
                            {cards.map(card => (
                                <div key={card.id} className="flashcard">
                                    <div className="card-front">
                                        <h3>–í–æ–ø—Ä–æ—Å</h3>
                                        <p>{card.question}</p>
                                    </div>
                                    <div className="card-back">
                                        <h3>–û—Ç–≤–µ—Ç</h3>
                                        <p>{card.answer}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </section>
                )}
            </main>

            <footer className="app-footer">
                <p>–£—á–µ–±–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ PDF ‚Ä¢ –í–µ—Ä—Å–∏—è 1.0.0</p>
            </footer>
        </div>
    );
};

export default App;