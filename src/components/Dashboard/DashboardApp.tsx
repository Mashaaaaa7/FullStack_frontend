import React, { useState, useEffect } from 'react';
import { Deck, Card } from '../../types';
import { api } from '../../api/api';
import { useAuth } from '../../Context/AuthContext';
import '../../App.css';

const DashboardApp: React.FC = () => {
    const { user } = useAuth();
    const [decks, setDecks] = useState<Deck[]>([]);
    const [cards, setCards] = useState<Card[]>([]);
    const [selectedDeck, setSelectedDeck] = useState<string>('');
    const [loading, setLoading] = useState(false);
    const [message, setMessage] = useState('');

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        const savedCards = localStorage.getItem('savedCards');
        const savedSelectedDeck = localStorage.getItem('selectedDeck');

        if (savedCards && savedSelectedDeck) {
            try {
                setCards(JSON.parse(savedCards));
                setSelectedDeck(savedSelectedDeck);
            } catch (error) {
                console.error('Error loading saved cards:', error);
            }
        }

        loadDecks();
    }, []);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    useEffect(() => {
        if (cards.length > 0 && selectedDeck) {
            localStorage.setItem('savedCards', JSON.stringify(cards));
            localStorage.setItem('selectedDeck', selectedDeck);
        }
    }, [cards, selectedDeck]);

    const loadDecks = async () => {
        try {
            const res = await api.getDecks();
            if (res.success && Array.isArray(res.decks)) {
                setDecks(res.decks);
            } else {
                setDecks([]);
            }
        } catch (error) {
            console.error('Load decks error:', error);
            setMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
            setDecks([]);
        }
    };

    const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (!file) return;

        setLoading(true);
        setMessage('');

        try {
            const res = await api.uploadPDF(file);
            if (res.success) {
                setMessage('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
                await loadDecks();
            } else {
                setMessage(res.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            }
            e.target.value = '';
        } catch (err) {
            console.error('Upload error:', err);
            setMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
        } finally {
            setLoading(false);
        }
    };

    const handleCreateCards = async (deckName: string) => {
        setLoading(true);
        setMessage('');
        try {
            const res = await api.createCards(deckName);
            if (res.success) {
                setCards(res.cards);
                setSelectedDeck(deckName);
                setMessage(`–°–æ–∑–¥–∞–Ω–æ ${res.total} –∫–∞—Ä—Ç–æ—á–µ–∫`);
            }
        } catch (err) {
            console.error(err);
            setMessage('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫');
        } finally {
            setLoading(false);
        }
    };

    const handleDeleteDeck = async (deckName: string) => {
        if (!window.confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${deckName}" –∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏?`)) return;
        setLoading(true);
        setMessage('');
        try {
            const res = await api.deleteDeck(deckName);
            setMessage(res.message);
            if (res.success) {
                await loadDecks();
                if (selectedDeck === deckName) {
                    setCards([]);
                    setSelectedDeck('');
                    localStorage.removeItem('savedCards');
                    localStorage.removeItem('selectedDeck');
                }
            }
        } catch (err) {
            console.error(err);
            setMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
        } finally {
            setLoading(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    const handleClearCards = () => {
        setCards([]);
        setSelectedDeck('');
        localStorage.removeItem('savedCards');
        localStorage.removeItem('selectedDeck');
        setMessage('–ö–∞—Ä—Ç–æ—á–∫–∏ –æ—á–∏—â–µ–Ω—ã');
    };

    return (
        <div className="app">
            <header className="app-header">
                <h1>üé¥ –£—á–µ–±–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ PDF</h1>
                <div className="header-controls">
                    <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user?.email}</p>
                </div>
            </header>

            <main className="app-main">
                <section className="upload-section">
                    <h2>üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF</h2>
                    <div className="upload-area">
                        <input
                            type="file"
                            accept=".pdf"
                            onChange={handleFileUpload}
                            disabled={loading}
                            id="file-upload"
                        />
                        <label htmlFor="file-upload" className="upload-label">
                            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í—ã–±–µ—Ä–∏—Ç–µ PDF'}
                        </label>
                    </div>
                </section>

                {message && (
                    <div className={`message ${message.includes('–û—à–∏–±–∫–∞') ? 'error' : 'success'}`}>
                        {message}
                    </div>
                )}

                <section className="decks-section">
                    <h2>üìÅ PDF —Ñ–∞–π–ª—ã ({decks.length})</h2>
                    <div className="decks-grid">
                        {decks.map(deck => (
                            <div key={deck.name} className="deck-card">
                                <div className="deck-info">
                                    <h3>{deck.name}</h3>
                                    <p>–†–∞–∑–º–µ—Ä: {(deck.file_size/1024/1024).toFixed(2)} MB</p>
                                    <p>–ó–∞–≥—Ä—É–∂–µ–Ω: {new Date(deck.created_at).toLocaleString('ru-RU')}</p>
                                </div>
                                <div className="deck-actions">
                                    <button
                                        onClick={() => handleCreateCards(deck.name)}
                                        disabled={loading}
                                        className="create-cards-btn"
                                    >
                                        –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
                                    </button>
                                    <button
                                        onClick={() => handleDeleteDeck(deck.name)}
                                        disabled={loading}
                                        className="delete-btn"
                                    >
                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </div>
                            </div>
                        ))}
                        {decks.length === 0 && (
                            <div className="empty-state">
                                <p>–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö PDF</p>
                            </div>
                        )}
                    </div>
                </section>

                {cards.length > 0 && (
                    <section className="cards-section">
                        <div className="cards-header">
                            <h2>üé¥ –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ "{selectedDeck}" ({cards.length})</h2>
                            <button
                                onClick={handleClearCards}
                                className="clear-cards-btn"
                                title="–û—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏"
                            >
                                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                            </button>
                        </div>
                        <div className="cards-grid">
                            {cards.map(card => (
                                <div key={card.id} className="flashcard">
                                    <div className="card-front">
                                        <h3>–í–æ–ø—Ä–æ—Å</h3>
                                        <p>{card.question}</p>
                                    </div>
                                    <div className="card-back">
                                        <h3>–û—Ç–≤–µ—Ç</h3>
                                        <p>{card.answer}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </section>
                )}
            </main>

            <footer className="app-footer">
                –£—á–µ–±–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ PDF ‚Ä¢ –í–µ—Ä—Å–∏—è 1.0.0
            </footer>
        </div>
    );
};

export default DashboardApp;